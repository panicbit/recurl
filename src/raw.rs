/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const LIBCURL_COPYRIGHT: &'static [u8; 47usize] =
    b"1996 - 2019 Daniel Stenberg, <daniel@haxx.se>.\0";
pub const LIBCURL_VERSION: &'static [u8; 7usize] = b"7.64.1\0";
pub const LIBCURL_VERSION_MAJOR: u32 = 7;
pub const LIBCURL_VERSION_MINOR: u32 = 64;
pub const LIBCURL_VERSION_PATCH: u32 = 1;
pub const LIBCURL_VERSION_NUM: u32 = 475137;
pub const LIBCURL_TIMESTAMP: &'static [u8; 11usize] = b"2019-03-27\0";
pub const CURL_FORMAT_CURL_OFF_T: &'static [u8; 3usize] = b"ld\0";
pub const CURL_FORMAT_CURL_OFF_TU: &'static [u8; 3usize] = b"lu\0";
pub const CURL_PULL_SYS_TYPES_H: u32 = 1;
pub const CURL_PULL_SYS_SOCKET_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 29;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const __osockaddr_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const CURL_SOCKET_BAD: i32 = -1;
pub const CURL_HTTPPOST_FILENAME: u32 = 1;
pub const CURL_HTTPPOST_READFILE: u32 = 2;
pub const CURL_HTTPPOST_PTRNAME: u32 = 4;
pub const CURL_HTTPPOST_PTRCONTENTS: u32 = 8;
pub const CURL_HTTPPOST_BUFFER: u32 = 16;
pub const CURL_HTTPPOST_PTRBUFFER: u32 = 32;
pub const CURL_HTTPPOST_CALLBACK: u32 = 64;
pub const CURL_HTTPPOST_LARGE: u32 = 128;
pub const CURL_MAX_READ_SIZE: u32 = 524288;
pub const CURL_MAX_WRITE_SIZE: u32 = 16384;
pub const CURL_MAX_HTTP_HEADER: u32 = 102400;
pub const CURL_WRITEFUNC_PAUSE: u32 = 268435457;
pub const CURLFINFOFLAG_KNOWN_FILENAME: u32 = 1;
pub const CURLFINFOFLAG_KNOWN_FILETYPE: u32 = 2;
pub const CURLFINFOFLAG_KNOWN_TIME: u32 = 4;
pub const CURLFINFOFLAG_KNOWN_PERM: u32 = 8;
pub const CURLFINFOFLAG_KNOWN_UID: u32 = 16;
pub const CURLFINFOFLAG_KNOWN_GID: u32 = 32;
pub const CURLFINFOFLAG_KNOWN_SIZE: u32 = 64;
pub const CURLFINFOFLAG_KNOWN_HLINKCOUNT: u32 = 128;
pub const CURL_CHUNK_BGN_FUNC_OK: u32 = 0;
pub const CURL_CHUNK_BGN_FUNC_FAIL: u32 = 1;
pub const CURL_CHUNK_BGN_FUNC_SKIP: u32 = 2;
pub const CURL_CHUNK_END_FUNC_OK: u32 = 0;
pub const CURL_CHUNK_END_FUNC_FAIL: u32 = 1;
pub const CURL_FNMATCHFUNC_MATCH: u32 = 0;
pub const CURL_FNMATCHFUNC_NOMATCH: u32 = 1;
pub const CURL_FNMATCHFUNC_FAIL: u32 = 2;
pub const CURL_SEEKFUNC_OK: u32 = 0;
pub const CURL_SEEKFUNC_FAIL: u32 = 1;
pub const CURL_SEEKFUNC_CANTSEEK: u32 = 2;
pub const CURL_READFUNC_ABORT: u32 = 268435456;
pub const CURL_READFUNC_PAUSE: u32 = 268435457;
pub const CURL_TRAILERFUNC_OK: u32 = 0;
pub const CURL_TRAILERFUNC_ABORT: u32 = 1;
pub const CURL_SOCKOPT_OK: u32 = 0;
pub const CURL_SOCKOPT_ERROR: u32 = 1;
pub const CURL_SOCKOPT_ALREADY_CONNECTED: u32 = 2;
pub const CURLE_ALREADY_COMPLETE: u32 = 99999;
pub const CURLSSH_AUTH_ANY: i32 = -1;
pub const CURLSSH_AUTH_NONE: u32 = 0;
pub const CURLSSH_AUTH_PUBLICKEY: u32 = 1;
pub const CURLSSH_AUTH_PASSWORD: u32 = 2;
pub const CURLSSH_AUTH_HOST: u32 = 4;
pub const CURLSSH_AUTH_KEYBOARD: u32 = 8;
pub const CURLSSH_AUTH_AGENT: u32 = 16;
pub const CURLSSH_AUTH_GSSAPI: u32 = 32;
pub const CURLSSH_AUTH_DEFAULT: i32 = -1;
pub const CURLGSSAPI_DELEGATION_NONE: u32 = 0;
pub const CURLGSSAPI_DELEGATION_POLICY_FLAG: u32 = 1;
pub const CURLGSSAPI_DELEGATION_FLAG: u32 = 2;
pub const CURL_ERROR_SIZE: u32 = 256;
pub const CURLSSLOPT_ALLOW_BEAST: u32 = 1;
pub const CURLSSLOPT_NO_REVOKE: u32 = 2;
pub const CURL_HET_DEFAULT: u32 = 200;
pub const CURL_UPKEEP_INTERVAL_DEFAULT: u32 = 60000;
pub const CURLHEADER_UNIFIED: u32 = 0;
pub const CURLHEADER_SEPARATE: u32 = 1;
pub const CURLALTSVC_IMMEDIATELY: u32 = 1;
pub const CURLALTSVC_ALTUSED: u32 = 2;
pub const CURLALTSVC_READONLYFILE: u32 = 4;
pub const CURLALTSVC_H1: u32 = 8;
pub const CURLALTSVC_H2: u32 = 16;
pub const CURLALTSVC_H3: u32 = 32;
pub const CURLPROTO_HTTP: u32 = 1;
pub const CURLPROTO_HTTPS: u32 = 2;
pub const CURLPROTO_FTP: u32 = 4;
pub const CURLPROTO_FTPS: u32 = 8;
pub const CURLPROTO_SCP: u32 = 16;
pub const CURLPROTO_SFTP: u32 = 32;
pub const CURLPROTO_TELNET: u32 = 64;
pub const CURLPROTO_LDAP: u32 = 128;
pub const CURLPROTO_LDAPS: u32 = 256;
pub const CURLPROTO_DICT: u32 = 512;
pub const CURLPROTO_FILE: u32 = 1024;
pub const CURLPROTO_TFTP: u32 = 2048;
pub const CURLPROTO_IMAP: u32 = 4096;
pub const CURLPROTO_IMAPS: u32 = 8192;
pub const CURLPROTO_POP3: u32 = 16384;
pub const CURLPROTO_POP3S: u32 = 32768;
pub const CURLPROTO_SMTP: u32 = 65536;
pub const CURLPROTO_SMTPS: u32 = 131072;
pub const CURLPROTO_RTSP: u32 = 262144;
pub const CURLPROTO_RTMP: u32 = 524288;
pub const CURLPROTO_RTMPT: u32 = 1048576;
pub const CURLPROTO_RTMPE: u32 = 2097152;
pub const CURLPROTO_RTMPTE: u32 = 4194304;
pub const CURLPROTO_RTMPS: u32 = 8388608;
pub const CURLPROTO_RTMPTS: u32 = 16777216;
pub const CURLPROTO_GOPHER: u32 = 33554432;
pub const CURLPROTO_SMB: u32 = 67108864;
pub const CURLPROTO_SMBS: u32 = 134217728;
pub const CURLPROTO_ALL: i32 = -1;
pub const CURLOPTTYPE_LONG: u32 = 0;
pub const CURLOPTTYPE_OBJECTPOINT: u32 = 10000;
pub const CURLOPTTYPE_STRINGPOINT: u32 = 10000;
pub const CURLOPTTYPE_FUNCTIONPOINT: u32 = 20000;
pub const CURLOPTTYPE_OFF_T: u32 = 30000;
pub const CURL_IPRESOLVE_WHATEVER: u32 = 0;
pub const CURL_IPRESOLVE_V4: u32 = 1;
pub const CURL_IPRESOLVE_V6: u32 = 2;
pub const CURL_REDIR_GET_ALL: u32 = 0;
pub const CURL_REDIR_POST_301: u32 = 1;
pub const CURL_REDIR_POST_302: u32 = 2;
pub const CURL_REDIR_POST_303: u32 = 4;
pub const CURL_REDIR_POST_ALL: u32 = 7;
pub const CURLINFO_STRING: u32 = 1048576;
pub const CURLINFO_LONG: u32 = 2097152;
pub const CURLINFO_DOUBLE: u32 = 3145728;
pub const CURLINFO_SLIST: u32 = 4194304;
pub const CURLINFO_PTR: u32 = 4194304;
pub const CURLINFO_SOCKET: u32 = 5242880;
pub const CURLINFO_OFF_T: u32 = 6291456;
pub const CURLINFO_MASK: u32 = 1048575;
pub const CURLINFO_TYPEMASK: u32 = 15728640;
pub const CURL_GLOBAL_SSL: u32 = 1;
pub const CURL_GLOBAL_WIN32: u32 = 2;
pub const CURL_GLOBAL_ALL: u32 = 3;
pub const CURL_GLOBAL_NOTHING: u32 = 0;
pub const CURL_GLOBAL_DEFAULT: u32 = 3;
pub const CURL_GLOBAL_ACK_EINTR: u32 = 4;
pub const CURL_VERSION_IPV6: u32 = 1;
pub const CURL_VERSION_KERBEROS4: u32 = 2;
pub const CURL_VERSION_SSL: u32 = 4;
pub const CURL_VERSION_LIBZ: u32 = 8;
pub const CURL_VERSION_NTLM: u32 = 16;
pub const CURL_VERSION_GSSNEGOTIATE: u32 = 32;
pub const CURL_VERSION_DEBUG: u32 = 64;
pub const CURL_VERSION_ASYNCHDNS: u32 = 128;
pub const CURL_VERSION_SPNEGO: u32 = 256;
pub const CURL_VERSION_LARGEFILE: u32 = 512;
pub const CURL_VERSION_IDN: u32 = 1024;
pub const CURL_VERSION_SSPI: u32 = 2048;
pub const CURL_VERSION_CONV: u32 = 4096;
pub const CURL_VERSION_CURLDEBUG: u32 = 8192;
pub const CURL_VERSION_TLSAUTH_SRP: u32 = 16384;
pub const CURL_VERSION_NTLM_WB: u32 = 32768;
pub const CURL_VERSION_HTTP2: u32 = 65536;
pub const CURL_VERSION_GSSAPI: u32 = 131072;
pub const CURL_VERSION_KERBEROS5: u32 = 262144;
pub const CURL_VERSION_UNIX_SOCKETS: u32 = 524288;
pub const CURL_VERSION_PSL: u32 = 1048576;
pub const CURL_VERSION_HTTPS_PROXY: u32 = 2097152;
pub const CURL_VERSION_MULTI_SSL: u32 = 4194304;
pub const CURL_VERSION_BROTLI: u32 = 8388608;
pub const CURL_VERSION_ALTSVC: u32 = 16777216;
pub const CURLPAUSE_RECV: u32 = 1;
pub const CURLPAUSE_RECV_CONT: u32 = 0;
pub const CURLPAUSE_SEND: u32 = 4;
pub const CURLPAUSE_SEND_CONT: u32 = 0;
pub const CURLPAUSE_ALL: u32 = 5;
pub const CURLPAUSE_CONT: u32 = 0;
pub const CURLPIPE_NOTHING: u32 = 0;
pub const CURLPIPE_HTTP1: u32 = 1;
pub const CURLPIPE_MULTIPLEX: u32 = 2;
pub const CURL_WAIT_POLLIN: u32 = 1;
pub const CURL_WAIT_POLLPRI: u32 = 2;
pub const CURL_WAIT_POLLOUT: u32 = 4;
pub const CURL_POLL_NONE: u32 = 0;
pub const CURL_POLL_IN: u32 = 1;
pub const CURL_POLL_OUT: u32 = 2;
pub const CURL_POLL_INOUT: u32 = 3;
pub const CURL_POLL_REMOVE: u32 = 4;
pub const CURL_SOCKET_TIMEOUT: i32 = -1;
pub const CURL_CSELECT_IN: u32 = 1;
pub const CURL_CSELECT_OUT: u32 = 2;
pub const CURL_CSELECT_ERR: u32 = 4;
pub const CURL_PUSH_OK: u32 = 0;
pub const CURL_PUSH_DENY: u32 = 1;
pub const CURLU_DEFAULT_PORT: u32 = 1;
pub const CURLU_NO_DEFAULT_PORT: u32 = 2;
pub const CURLU_DEFAULT_SCHEME: u32 = 4;
pub const CURLU_NON_SUPPORT_SCHEME: u32 = 8;
pub const CURLU_PATH_AS_IS: u32 = 16;
pub const CURLU_DISALLOW_USER: u32 = 32;
pub const CURLU_URLDECODE: u32 = 64;
pub const CURLU_URLENCODE: u32 = 128;
pub const CURLU_APPENDQUERY: u32 = 256;
pub const CURLU_GUESS_SCHEME: u32 = 512;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_schar;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __intmax_t = ::libc::c_long;
pub type __uintmax_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::libc::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type __sig_atomic_t = ::libc::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type uint = ::libc::c_uint;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::libc::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::libc::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::libc::c_uint,
    pub __writers: ::libc::c_uint,
    pub __wrphase_futex: ::libc::c_uint,
    pub __writers_futex: ::libc::c_uint,
    pub __pad3: ::libc::c_uint,
    pub __pad4: ::libc::c_uint,
    pub __cur_writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __rwelision: ::libc::c_schar,
    pub __pad1: [::libc::c_uchar; 7usize],
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::libc::c_uint; 2usize],
    pub __g_size: [::libc::c_uint; 2usize],
    pub __g1_orig_size: ::libc::c_uint,
    pub __wrefs: ::libc::c_uint,
    pub __g_signals: [::libc::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::libc::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::libc::c_uint,
    pub __high: ::libc::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::libc::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::libc::c_uint,
    pub __high: ::libc::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::libc::c_char; 4usize],
    pub __align: ::libc::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::libc::c_char; 4usize],
    pub __align: ::libc::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::libc::c_char; 56usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::libc::c_char; 40usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::libc::c_char; 48usize],
    pub __align: ::libc::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::libc::c_char; 56usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::libc::c_char; 8usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::libc::c_char; 32usize],
    pub __align: ::libc::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::libc::c_char; 4usize],
    pub __align: ::libc::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::libc::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type socklen_t = __socklen_t;
pub mod __socket_type {
    pub type Type = u32;
    pub const SOCK_STREAM: Type = 1;
    pub const SOCK_DGRAM: Type = 2;
    pub const SOCK_RAW: Type = 3;
    pub const SOCK_RDM: Type = 4;
    pub const SOCK_SEQPACKET: Type = 5;
    pub const SOCK_DCCP: Type = 6;
    pub const SOCK_PACKET: Type = 10;
    pub const SOCK_CLOEXEC: Type = 524288;
    pub const SOCK_NONBLOCK: Type = 2048;
}
pub type sa_family_t = ::libc::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::libc::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::libc::c_char; 118usize],
    pub __ss_align: ::libc::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub mod _bindgen_ty_1 {
    pub type Type = u32;
    pub const MSG_OOB: Type = 1;
    pub const MSG_PEEK: Type = 2;
    pub const MSG_DONTROUTE: Type = 4;
    pub const MSG_CTRUNC: Type = 8;
    pub const MSG_PROXY: Type = 16;
    pub const MSG_TRUNC: Type = 32;
    pub const MSG_DONTWAIT: Type = 64;
    pub const MSG_EOR: Type = 128;
    pub const MSG_WAITALL: Type = 256;
    pub const MSG_FIN: Type = 512;
    pub const MSG_SYN: Type = 1024;
    pub const MSG_CONFIRM: Type = 2048;
    pub const MSG_RST: Type = 4096;
    pub const MSG_ERRQUEUE: Type = 8192;
    pub const MSG_NOSIGNAL: Type = 16384;
    pub const MSG_MORE: Type = 32768;
    pub const MSG_WAITFORONE: Type = 65536;
    pub const MSG_BATCH: Type = 262144;
    pub const MSG_ZEROCOPY: Type = 67108864;
    pub const MSG_FASTOPEN: Type = 536870912;
    pub const MSG_CMSG_CLOEXEC: Type = 1073741824;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::libc::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::libc::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::libc::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::libc::c_int,
    pub cmsg_type: ::libc::c_int,
    pub __cmsg_data: __IncompleteArrayField<::libc::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub mod _bindgen_ty_2 {
    pub type Type = u32;
    pub const SCM_RIGHTS: Type = 1;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::libc::c_int,
    pub l_linger: ::libc::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::libc::c_ushort,
    pub sa_data: [::libc::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub mod _bindgen_ty_3 {
    pub type Type = u32;
    pub const SHUT_RD: Type = 0;
    pub const SHUT_WR: Type = 1;
    pub const SHUT_RDWR: Type = 2;
}
extern "C" {
    pub fn socket(
        __domain: ::libc::c_int,
        __type: ::libc::c_int,
        __protocol: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::libc::c_int,
        __type: ::libc::c_int,
        __protocol: ::libc::c_int,
        __fds: *mut ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn bind(__fd: ::libc::c_int, __addr: *const sockaddr, __len: socklen_t) -> ::libc::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::libc::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn connect(__fd: ::libc::c_int, __addr: *const sockaddr, __len: socklen_t)
        -> ::libc::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::libc::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::libc::c_int,
        __buf: *const ::libc::c_void,
        __n: usize,
        __flags: ::libc::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::libc::c_int,
        __buf: *mut ::libc::c_void,
        __n: usize,
        __flags: ::libc::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::libc::c_int,
        __buf: *const ::libc::c_void,
        __n: usize,
        __flags: ::libc::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::libc::c_int,
        __buf: *mut ::libc::c_void,
        __n: usize,
        __flags: ::libc::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(__fd: ::libc::c_int, __message: *const msghdr, __flags: ::libc::c_int) -> isize;
}
extern "C" {
    pub fn recvmsg(__fd: ::libc::c_int, __message: *mut msghdr, __flags: ::libc::c_int) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::libc::c_int,
        __level: ::libc::c_int,
        __optname: ::libc::c_int,
        __optval: *mut ::libc::c_void,
        __optlen: *mut socklen_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::libc::c_int,
        __level: ::libc::c_int,
        __optname: ::libc::c_int,
        __optval: *const ::libc::c_void,
        __optlen: socklen_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn listen(__fd: ::libc::c_int, __n: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::libc::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn shutdown(__fd: ::libc::c_int, __how: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn isfdtype(__fd: ::libc::c_int, __fdtype: ::libc::c_int) -> ::libc::c_int;
}
pub type curl_socklen_t = socklen_t;
pub type curl_off_t = ::libc::c_long;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::libc::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::libc::c_uint,
    pub __wchb: [::libc::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_schar,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::libc::c_void,
    pub __pad5: usize,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::libc::c_int,
        __old: *const ::libc::c_char,
        __newfd: ::libc::c_int,
        __new: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::libc::c_char,
        __pfx: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::libc::c_char, __modes: *const ::libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::libc::c_char,
        __modes: *const ::libc::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::libc::c_void,
        __len: usize,
        __modes: *const ::libc::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char, __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::libc::c_char,
        __modes: ::libc::c_int,
        __n: usize,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char, ...)
        -> ::libc::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::libc::c_char, __arg: *mut __va_list_tag) -> ::libc::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::libc::c_char,
        __format: *const ::libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::libc::c_char,
        __maxlen: ::libc::c_ulong,
        __format: *const ::libc::c_char,
        ...
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::libc::c_char,
        __maxlen: ::libc::c_ulong,
        __format: *const ::libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::libc::c_int,
        __fmt: *const ::libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::libc::c_char,
        __format: *const ::libc::c_char,
        ...
    ) -> ::libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::libc::c_char,
        __format: *const ::libc::c_char,
        ...
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::libc::c_char, __arg: *mut __va_list_tag) -> ::libc::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::libc::c_char,
        __format: *const ::libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::libc::c_char, __arg: *mut __va_list_tag) -> ::libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::libc::c_char,
        __format: *const ::libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn getchar() -> ::libc::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::libc::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::libc::c_char,
        __n: ::libc::c_int,
        __stream: *mut FILE,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::libc::c_char,
        __n: *mut usize,
        __delimiter: ::libc::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::libc::c_char,
        __n: *mut usize,
        __delimiter: ::libc::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::libc::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::libc::c_void,
        __size: ::libc::c_ulong,
        __n: ::libc::c_ulong,
        __stream: *mut FILE,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::libc::c_void,
        __size: ::libc::c_ulong,
        __n: ::libc::c_ulong,
        __s: *mut FILE,
    ) -> ::libc::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::libc::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::libc::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::libc::c_long,
        __whence: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::libc::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::libc::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::libc::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::libc::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::libc::c_char, __modes: *const ::libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::libc::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::libc::c_int) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::libc::c_char,
        __maxsize: usize,
        __format: *const ::libc::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::libc::c_char,
        __maxsize: usize,
        __format: *const ::libc::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::libc::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::libc::c_int;
}
extern "C" {
    pub static mut __timezone: ::libc::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::libc::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::libc::c_int;
}
extern "C" {
    pub static mut timezone: ::libc::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::libc::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::libc::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::libc::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::libc::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::libc::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::libc::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::libc::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::libc::c_int) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::libc::c_int,
    pub tz_dsttime: ::libc::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t) -> ::libc::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::libc::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::libc::c_int;
}
pub mod __itimer_which {
    pub type Type = u32;
    pub const ITIMER_REAL: Type = 0;
    pub const ITIMER_VIRTUAL: Type = 1;
    pub const ITIMER_PROF: Type = 2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::libc::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::libc::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn utimes(__file: *const ::libc::c_char, __tvp: *const timeval) -> ::libc::c_int;
}
extern "C" {
    pub fn lutimes(__file: *const ::libc::c_char, __tvp: *const timeval) -> ::libc::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::libc::c_int, __tvp: *const timeval) -> ::libc::c_int;
}
pub type CURL = ::libc::c_void;
pub type CURLSH = ::libc::c_void;
pub type curl_socket_t = ::libc::c_int;
pub mod curl_sslbackend {
    pub type Type = u32;
    pub const CURLSSLBACKEND_NONE: Type = 0;
    pub const CURLSSLBACKEND_OPENSSL: Type = 1;
    pub const CURLSSLBACKEND_GNUTLS: Type = 2;
    pub const CURLSSLBACKEND_NSS: Type = 3;
    pub const CURLSSLBACKEND_OBSOLETE4: Type = 4;
    pub const CURLSSLBACKEND_GSKIT: Type = 5;
    pub const CURLSSLBACKEND_POLARSSL: Type = 6;
    pub const CURLSSLBACKEND_WOLFSSL: Type = 7;
    pub const CURLSSLBACKEND_SCHANNEL: Type = 8;
    pub const CURLSSLBACKEND_SECURETRANSPORT: Type = 9;
    pub const CURLSSLBACKEND_AXTLS: Type = 10;
    pub const CURLSSLBACKEND_MBEDTLS: Type = 11;
    pub const CURLSSLBACKEND_MESALINK: Type = 12;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_httppost {
    pub next: *mut curl_httppost,
    pub name: *mut ::libc::c_char,
    pub namelength: ::libc::c_long,
    pub contents: *mut ::libc::c_char,
    pub contentslength: ::libc::c_long,
    pub buffer: *mut ::libc::c_char,
    pub bufferlength: ::libc::c_long,
    pub contenttype: *mut ::libc::c_char,
    pub contentheader: *mut curl_slist,
    pub more: *mut curl_httppost,
    pub flags: ::libc::c_long,
    pub showfilename: *mut ::libc::c_char,
    pub userp: *mut ::libc::c_void,
    pub contentlen: curl_off_t,
}
#[test]
fn bindgen_test_layout_curl_httppost() {
    assert_eq!(
        ::std::mem::size_of::<curl_httppost>(),
        112usize,
        concat!("Size of: ", stringify!(curl_httppost))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_httppost>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_httppost))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).namelength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(namelength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).contents as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).contentslength as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(contentslength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).buffer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).bufferlength as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(bufferlength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).contenttype as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(contenttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).contentheader as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(contentheader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).more as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(more)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).showfilename as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(showfilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).userp as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(userp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_httppost>())).contentlen as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_httppost),
            "::",
            stringify!(contentlen)
        )
    );
}
pub type curl_progress_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::libc::c_void,
        dltotal: f64,
        dlnow: f64,
        ultotal: f64,
        ulnow: f64,
    ) -> ::libc::c_int,
>;
pub type curl_xferinfo_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::libc::c_void,
        dltotal: curl_off_t,
        dlnow: curl_off_t,
        ultotal: curl_off_t,
        ulnow: curl_off_t,
    ) -> ::libc::c_int,
>;
pub type curl_write_callback = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *mut ::libc::c_char,
        size: usize,
        nitems: usize,
        outstream: *mut ::libc::c_void,
    ) -> usize,
>;
pub type curl_resolver_start_callback = ::std::option::Option<
    unsafe extern "C" fn(
        resolver_state: *mut ::libc::c_void,
        reserved: *mut ::libc::c_void,
        userdata: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub mod curlfiletype {
    pub type Type = u32;
    pub const CURLFILETYPE_FILE: Type = 0;
    pub const CURLFILETYPE_DIRECTORY: Type = 1;
    pub const CURLFILETYPE_SYMLINK: Type = 2;
    pub const CURLFILETYPE_DEVICE_BLOCK: Type = 3;
    pub const CURLFILETYPE_DEVICE_CHAR: Type = 4;
    pub const CURLFILETYPE_NAMEDPIPE: Type = 5;
    pub const CURLFILETYPE_SOCKET: Type = 6;
    pub const CURLFILETYPE_DOOR: Type = 7;
    pub const CURLFILETYPE_UNKNOWN: Type = 8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_fileinfo {
    pub filename: *mut ::libc::c_char,
    pub filetype: curlfiletype::Type,
    pub time: time_t,
    pub perm: ::libc::c_uint,
    pub uid: ::libc::c_int,
    pub gid: ::libc::c_int,
    pub size: curl_off_t,
    pub hardlinks: ::libc::c_long,
    pub strings: curl_fileinfo__bindgen_ty_1,
    pub flags: ::libc::c_uint,
    pub b_data: *mut ::libc::c_char,
    pub b_size: usize,
    pub b_used: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_fileinfo__bindgen_ty_1 {
    pub time: *mut ::libc::c_char,
    pub perm: *mut ::libc::c_char,
    pub user: *mut ::libc::c_char,
    pub group: *mut ::libc::c_char,
    pub target: *mut ::libc::c_char,
}
#[test]
fn bindgen_test_layout_curl_fileinfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<curl_fileinfo__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(curl_fileinfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_fileinfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_fileinfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_fileinfo__bindgen_ty_1>())).time as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_fileinfo__bindgen_ty_1>())).perm as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo__bindgen_ty_1),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_fileinfo__bindgen_ty_1>())).user as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_fileinfo__bindgen_ty_1>())).group as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo__bindgen_ty_1),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_fileinfo__bindgen_ty_1>())).target as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo__bindgen_ty_1),
            "::",
            stringify!(target)
        )
    );
}
#[test]
fn bindgen_test_layout_curl_fileinfo() {
    assert_eq!(
        ::std::mem::size_of::<curl_fileinfo>(),
        128usize,
        concat!("Size of: ", stringify!(curl_fileinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_fileinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_fileinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).filename as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).filetype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(filetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).perm as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).hardlinks as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(hardlinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).strings as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).flags as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).b_data as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(b_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).b_size as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(b_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_fileinfo>())).b_used as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_fileinfo),
            "::",
            stringify!(b_used)
        )
    );
}
pub type curl_chunk_bgn_callback = ::std::option::Option<
    unsafe extern "C" fn(
        transfer_info: *const ::libc::c_void,
        ptr: *mut ::libc::c_void,
        remains: ::libc::c_int,
    ) -> ::libc::c_long,
>;
pub type curl_chunk_end_callback =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::libc::c_void) -> ::libc::c_long>;
pub type curl_fnmatch_callback = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::libc::c_void,
        pattern: *const ::libc::c_char,
        string: *const ::libc::c_char,
    ) -> ::libc::c_int,
>;
pub type curl_seek_callback = ::std::option::Option<
    unsafe extern "C" fn(
        instream: *mut ::libc::c_void,
        offset: curl_off_t,
        origin: ::libc::c_int,
    ) -> ::libc::c_int,
>;
pub type curl_read_callback = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *mut ::libc::c_char,
        size: usize,
        nitems: usize,
        instream: *mut ::libc::c_void,
    ) -> usize,
>;
pub type curl_trailer_callback = ::std::option::Option<
    unsafe extern "C" fn(
        list: *mut *mut curl_slist,
        userdata: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub mod curlsocktype {
    pub type Type = u32;
    pub const CURLSOCKTYPE_IPCXN: Type = 0;
    pub const CURLSOCKTYPE_ACCEPT: Type = 1;
    pub const CURLSOCKTYPE_LAST: Type = 2;
}
pub type curl_sockopt_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::libc::c_void,
        curlfd: curl_socket_t,
        purpose: curlsocktype::Type,
    ) -> ::libc::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_sockaddr {
    pub family: ::libc::c_int,
    pub socktype: ::libc::c_int,
    pub protocol: ::libc::c_int,
    pub addrlen: ::libc::c_uint,
    pub addr: sockaddr,
}
#[test]
fn bindgen_test_layout_curl_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<curl_sockaddr>(),
        32usize,
        concat!("Size of: ", stringify!(curl_sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_sockaddr>(),
        4usize,
        concat!("Alignment of ", stringify!(curl_sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_sockaddr>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_sockaddr),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_sockaddr>())).socktype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_sockaddr),
            "::",
            stringify!(socktype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_sockaddr>())).protocol as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_sockaddr),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_sockaddr>())).addrlen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_sockaddr),
            "::",
            stringify!(addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_sockaddr>())).addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_sockaddr),
            "::",
            stringify!(addr)
        )
    );
}
pub type curl_opensocket_callback = ::std::option::Option<
    unsafe extern "C" fn(
        clientp: *mut ::libc::c_void,
        purpose: curlsocktype::Type,
        address: *mut curl_sockaddr,
    ) -> curl_socket_t,
>;
pub type curl_closesocket_callback = ::std::option::Option<
    unsafe extern "C" fn(clientp: *mut ::libc::c_void, item: curl_socket_t) -> ::libc::c_int,
>;
pub mod curlioerr {
    pub type Type = u32;
    pub const CURLIOE_OK: Type = 0;
    pub const CURLIOE_UNKNOWNCMD: Type = 1;
    pub const CURLIOE_FAILRESTART: Type = 2;
    pub const CURLIOE_LAST: Type = 3;
}
pub mod curliocmd {
    pub type Type = u32;
    pub const CURLIOCMD_NOP: Type = 0;
    pub const CURLIOCMD_RESTARTREAD: Type = 1;
    pub const CURLIOCMD_LAST: Type = 2;
}
pub type curl_ioctl_callback = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut CURL,
        cmd: ::libc::c_int,
        clientp: *mut ::libc::c_void,
    ) -> curlioerr::Type,
>;
pub type curl_malloc_callback =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::libc::c_void>;
pub type curl_free_callback = ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::libc::c_void)>;
pub type curl_realloc_callback = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::libc::c_void, size: usize) -> *mut ::libc::c_void,
>;
pub type curl_strdup_callback =
    ::std::option::Option<unsafe extern "C" fn(str: *const ::libc::c_char) -> *mut ::libc::c_char>;
pub type curl_calloc_callback =
    ::std::option::Option<unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::libc::c_void>;
pub mod curl_infotype {
    pub type Type = u32;
    pub const CURLINFO_TEXT: Type = 0;
    pub const CURLINFO_HEADER_IN: Type = 1;
    pub const CURLINFO_HEADER_OUT: Type = 2;
    pub const CURLINFO_DATA_IN: Type = 3;
    pub const CURLINFO_DATA_OUT: Type = 4;
    pub const CURLINFO_SSL_DATA_IN: Type = 5;
    pub const CURLINFO_SSL_DATA_OUT: Type = 6;
    pub const CURLINFO_END: Type = 7;
}
pub type curl_debug_callback = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut CURL,
        type_: curl_infotype::Type,
        data: *mut ::libc::c_char,
        size: usize,
        userptr: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub mod CURLcode {
    pub type Type = u32;
    pub const CURLE_OK: Type = 0;
    pub const CURLE_UNSUPPORTED_PROTOCOL: Type = 1;
    pub const CURLE_FAILED_INIT: Type = 2;
    pub const CURLE_URL_MALFORMAT: Type = 3;
    pub const CURLE_NOT_BUILT_IN: Type = 4;
    pub const CURLE_COULDNT_RESOLVE_PROXY: Type = 5;
    pub const CURLE_COULDNT_RESOLVE_HOST: Type = 6;
    pub const CURLE_COULDNT_CONNECT: Type = 7;
    pub const CURLE_WEIRD_SERVER_REPLY: Type = 8;
    pub const CURLE_REMOTE_ACCESS_DENIED: Type = 9;
    pub const CURLE_FTP_ACCEPT_FAILED: Type = 10;
    pub const CURLE_FTP_WEIRD_PASS_REPLY: Type = 11;
    pub const CURLE_FTP_ACCEPT_TIMEOUT: Type = 12;
    pub const CURLE_FTP_WEIRD_PASV_REPLY: Type = 13;
    pub const CURLE_FTP_WEIRD_227_FORMAT: Type = 14;
    pub const CURLE_FTP_CANT_GET_HOST: Type = 15;
    pub const CURLE_HTTP2: Type = 16;
    pub const CURLE_FTP_COULDNT_SET_TYPE: Type = 17;
    pub const CURLE_PARTIAL_FILE: Type = 18;
    pub const CURLE_FTP_COULDNT_RETR_FILE: Type = 19;
    pub const CURLE_OBSOLETE20: Type = 20;
    pub const CURLE_QUOTE_ERROR: Type = 21;
    pub const CURLE_HTTP_RETURNED_ERROR: Type = 22;
    pub const CURLE_WRITE_ERROR: Type = 23;
    pub const CURLE_OBSOLETE24: Type = 24;
    pub const CURLE_UPLOAD_FAILED: Type = 25;
    pub const CURLE_READ_ERROR: Type = 26;
    pub const CURLE_OUT_OF_MEMORY: Type = 27;
    pub const CURLE_OPERATION_TIMEDOUT: Type = 28;
    pub const CURLE_OBSOLETE29: Type = 29;
    pub const CURLE_FTP_PORT_FAILED: Type = 30;
    pub const CURLE_FTP_COULDNT_USE_REST: Type = 31;
    pub const CURLE_OBSOLETE32: Type = 32;
    pub const CURLE_RANGE_ERROR: Type = 33;
    pub const CURLE_HTTP_POST_ERROR: Type = 34;
    pub const CURLE_SSL_CONNECT_ERROR: Type = 35;
    pub const CURLE_BAD_DOWNLOAD_RESUME: Type = 36;
    pub const CURLE_FILE_COULDNT_READ_FILE: Type = 37;
    pub const CURLE_LDAP_CANNOT_BIND: Type = 38;
    pub const CURLE_LDAP_SEARCH_FAILED: Type = 39;
    pub const CURLE_OBSOLETE40: Type = 40;
    pub const CURLE_FUNCTION_NOT_FOUND: Type = 41;
    pub const CURLE_ABORTED_BY_CALLBACK: Type = 42;
    pub const CURLE_BAD_FUNCTION_ARGUMENT: Type = 43;
    pub const CURLE_OBSOLETE44: Type = 44;
    pub const CURLE_INTERFACE_FAILED: Type = 45;
    pub const CURLE_OBSOLETE46: Type = 46;
    pub const CURLE_TOO_MANY_REDIRECTS: Type = 47;
    pub const CURLE_UNKNOWN_OPTION: Type = 48;
    pub const CURLE_TELNET_OPTION_SYNTAX: Type = 49;
    pub const CURLE_OBSOLETE50: Type = 50;
    pub const CURLE_OBSOLETE51: Type = 51;
    pub const CURLE_GOT_NOTHING: Type = 52;
    pub const CURLE_SSL_ENGINE_NOTFOUND: Type = 53;
    pub const CURLE_SSL_ENGINE_SETFAILED: Type = 54;
    pub const CURLE_SEND_ERROR: Type = 55;
    pub const CURLE_RECV_ERROR: Type = 56;
    pub const CURLE_OBSOLETE57: Type = 57;
    pub const CURLE_SSL_CERTPROBLEM: Type = 58;
    pub const CURLE_SSL_CIPHER: Type = 59;
    pub const CURLE_PEER_FAILED_VERIFICATION: Type = 60;
    pub const CURLE_BAD_CONTENT_ENCODING: Type = 61;
    pub const CURLE_LDAP_INVALID_URL: Type = 62;
    pub const CURLE_FILESIZE_EXCEEDED: Type = 63;
    pub const CURLE_USE_SSL_FAILED: Type = 64;
    pub const CURLE_SEND_FAIL_REWIND: Type = 65;
    pub const CURLE_SSL_ENGINE_INITFAILED: Type = 66;
    pub const CURLE_LOGIN_DENIED: Type = 67;
    pub const CURLE_TFTP_NOTFOUND: Type = 68;
    pub const CURLE_TFTP_PERM: Type = 69;
    pub const CURLE_REMOTE_DISK_FULL: Type = 70;
    pub const CURLE_TFTP_ILLEGAL: Type = 71;
    pub const CURLE_TFTP_UNKNOWNID: Type = 72;
    pub const CURLE_REMOTE_FILE_EXISTS: Type = 73;
    pub const CURLE_TFTP_NOSUCHUSER: Type = 74;
    pub const CURLE_CONV_FAILED: Type = 75;
    pub const CURLE_CONV_REQD: Type = 76;
    pub const CURLE_SSL_CACERT_BADFILE: Type = 77;
    pub const CURLE_REMOTE_FILE_NOT_FOUND: Type = 78;
    pub const CURLE_SSH: Type = 79;
    pub const CURLE_SSL_SHUTDOWN_FAILED: Type = 80;
    pub const CURLE_AGAIN: Type = 81;
    pub const CURLE_SSL_CRL_BADFILE: Type = 82;
    pub const CURLE_SSL_ISSUER_ERROR: Type = 83;
    pub const CURLE_FTP_PRET_FAILED: Type = 84;
    pub const CURLE_RTSP_CSEQ_ERROR: Type = 85;
    pub const CURLE_RTSP_SESSION_ERROR: Type = 86;
    pub const CURLE_FTP_BAD_FILE_LIST: Type = 87;
    pub const CURLE_CHUNK_FAILED: Type = 88;
    pub const CURLE_NO_CONNECTION_AVAILABLE: Type = 89;
    pub const CURLE_SSL_PINNEDPUBKEYNOTMATCH: Type = 90;
    pub const CURLE_SSL_INVALIDCERTSTATUS: Type = 91;
    pub const CURLE_HTTP2_STREAM: Type = 92;
    pub const CURLE_RECURSIVE_API_CALL: Type = 93;
    pub const CURL_LAST: Type = 94;
}
#[doc = "CURL_NO_OLDIES"]
pub type curl_conv_callback = ::std::option::Option<
    unsafe extern "C" fn(buffer: *mut ::libc::c_char, length: usize) -> CURLcode::Type,
>;
pub type curl_ssl_ctx_callback = ::std::option::Option<
    unsafe extern "C" fn(
        curl: *mut CURL,
        ssl_ctx: *mut ::libc::c_void,
        userptr: *mut ::libc::c_void,
    ) -> CURLcode::Type,
>;
pub mod curl_proxytype {
    pub type Type = u32;
    pub const CURLPROXY_HTTP: Type = 0;
    pub const CURLPROXY_HTTP_1_0: Type = 1;
    pub const CURLPROXY_HTTPS: Type = 2;
    pub const CURLPROXY_SOCKS4: Type = 4;
    pub const CURLPROXY_SOCKS5: Type = 5;
    pub const CURLPROXY_SOCKS4A: Type = 6;
    pub const CURLPROXY_SOCKS5_HOSTNAME: Type = 7;
}
pub mod curl_khtype {
    pub type Type = u32;
    pub const CURLKHTYPE_UNKNOWN: Type = 0;
    pub const CURLKHTYPE_RSA1: Type = 1;
    pub const CURLKHTYPE_RSA: Type = 2;
    pub const CURLKHTYPE_DSS: Type = 3;
    pub const CURLKHTYPE_ECDSA: Type = 4;
    pub const CURLKHTYPE_ED25519: Type = 5;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_khkey {
    pub key: *const ::libc::c_char,
    pub len: usize,
    pub keytype: curl_khtype::Type,
}
#[test]
fn bindgen_test_layout_curl_khkey() {
    assert_eq!(
        ::std::mem::size_of::<curl_khkey>(),
        24usize,
        concat!("Size of: ", stringify!(curl_khkey))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_khkey>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_khkey))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_khkey>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_khkey),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_khkey>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_khkey),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_khkey>())).keytype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_khkey),
            "::",
            stringify!(keytype)
        )
    );
}
pub mod curl_khstat {
    pub type Type = u32;
    pub const CURLKHSTAT_FINE_ADD_TO_FILE: Type = 0;
    pub const CURLKHSTAT_FINE: Type = 1;
    pub const CURLKHSTAT_REJECT: Type = 2;
    pub const CURLKHSTAT_DEFER: Type = 3;
    pub const CURLKHSTAT_LAST: Type = 4;
}
pub mod curl_khmatch {
    pub type Type = u32;
    pub const CURLKHMATCH_OK: Type = 0;
    pub const CURLKHMATCH_MISMATCH: Type = 1;
    pub const CURLKHMATCH_MISSING: Type = 2;
    pub const CURLKHMATCH_LAST: Type = 3;
}
pub type curl_sshkeycallback = ::std::option::Option<
    unsafe extern "C" fn(
        easy: *mut CURL,
        knownkey: *const curl_khkey,
        foundkey: *const curl_khkey,
        arg1: curl_khmatch::Type,
        clientp: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub mod curl_usessl {
    pub type Type = u32;
    pub const CURLUSESSL_NONE: Type = 0;
    pub const CURLUSESSL_TRY: Type = 1;
    pub const CURLUSESSL_CONTROL: Type = 2;
    pub const CURLUSESSL_ALL: Type = 3;
    pub const CURLUSESSL_LAST: Type = 4;
}
pub mod curl_ftpccc {
    #[doc = "CURL_NO_OLDIES"]
    pub type Type = u32;
    pub const CURLFTPSSL_CCC_NONE: Type = 0;
    pub const CURLFTPSSL_CCC_PASSIVE: Type = 1;
    pub const CURLFTPSSL_CCC_ACTIVE: Type = 2;
    pub const CURLFTPSSL_CCC_LAST: Type = 3;
}
pub mod curl_ftpauth {
    pub type Type = u32;
    pub const CURLFTPAUTH_DEFAULT: Type = 0;
    pub const CURLFTPAUTH_SSL: Type = 1;
    pub const CURLFTPAUTH_TLS: Type = 2;
    pub const CURLFTPAUTH_LAST: Type = 3;
}
pub mod curl_ftpcreatedir {
    pub type Type = u32;
    pub const CURLFTP_CREATE_DIR_NONE: Type = 0;
    pub const CURLFTP_CREATE_DIR: Type = 1;
    pub const CURLFTP_CREATE_DIR_RETRY: Type = 2;
    pub const CURLFTP_CREATE_DIR_LAST: Type = 3;
}
pub mod curl_ftpmethod {
    pub type Type = u32;
    pub const CURLFTPMETHOD_DEFAULT: Type = 0;
    pub const CURLFTPMETHOD_MULTICWD: Type = 1;
    pub const CURLFTPMETHOD_NOCWD: Type = 2;
    pub const CURLFTPMETHOD_SINGLECWD: Type = 3;
    pub const CURLFTPMETHOD_LAST: Type = 4;
}
pub mod CURLoption {
    pub type Type = u32;
    pub const CURLOPT_WRITEDATA: Type = 10001;
    pub const CURLOPT_URL: Type = 10002;
    pub const CURLOPT_PORT: Type = 3;
    pub const CURLOPT_PROXY: Type = 10004;
    pub const CURLOPT_USERPWD: Type = 10005;
    pub const CURLOPT_PROXYUSERPWD: Type = 10006;
    pub const CURLOPT_RANGE: Type = 10007;
    pub const CURLOPT_READDATA: Type = 10009;
    pub const CURLOPT_ERRORBUFFER: Type = 10010;
    pub const CURLOPT_WRITEFUNCTION: Type = 20011;
    pub const CURLOPT_READFUNCTION: Type = 20012;
    pub const CURLOPT_TIMEOUT: Type = 13;
    pub const CURLOPT_INFILESIZE: Type = 14;
    pub const CURLOPT_POSTFIELDS: Type = 10015;
    pub const CURLOPT_REFERER: Type = 10016;
    pub const CURLOPT_FTPPORT: Type = 10017;
    pub const CURLOPT_USERAGENT: Type = 10018;
    pub const CURLOPT_LOW_SPEED_LIMIT: Type = 19;
    pub const CURLOPT_LOW_SPEED_TIME: Type = 20;
    pub const CURLOPT_RESUME_FROM: Type = 21;
    pub const CURLOPT_COOKIE: Type = 10022;
    pub const CURLOPT_HTTPHEADER: Type = 10023;
    pub const CURLOPT_HTTPPOST: Type = 10024;
    pub const CURLOPT_SSLCERT: Type = 10025;
    pub const CURLOPT_KEYPASSWD: Type = 10026;
    pub const CURLOPT_CRLF: Type = 27;
    pub const CURLOPT_QUOTE: Type = 10028;
    pub const CURLOPT_HEADERDATA: Type = 10029;
    pub const CURLOPT_COOKIEFILE: Type = 10031;
    pub const CURLOPT_SSLVERSION: Type = 32;
    pub const CURLOPT_TIMECONDITION: Type = 33;
    pub const CURLOPT_TIMEVALUE: Type = 34;
    pub const CURLOPT_CUSTOMREQUEST: Type = 10036;
    pub const CURLOPT_STDERR: Type = 10037;
    pub const CURLOPT_POSTQUOTE: Type = 10039;
    pub const CURLOPT_OBSOLETE40: Type = 10040;
    pub const CURLOPT_VERBOSE: Type = 41;
    pub const CURLOPT_HEADER: Type = 42;
    pub const CURLOPT_NOPROGRESS: Type = 43;
    pub const CURLOPT_NOBODY: Type = 44;
    pub const CURLOPT_FAILONERROR: Type = 45;
    pub const CURLOPT_UPLOAD: Type = 46;
    pub const CURLOPT_POST: Type = 47;
    pub const CURLOPT_DIRLISTONLY: Type = 48;
    pub const CURLOPT_APPEND: Type = 50;
    pub const CURLOPT_NETRC: Type = 51;
    pub const CURLOPT_FOLLOWLOCATION: Type = 52;
    pub const CURLOPT_TRANSFERTEXT: Type = 53;
    pub const CURLOPT_PUT: Type = 54;
    pub const CURLOPT_PROGRESSFUNCTION: Type = 20056;
    pub const CURLOPT_PROGRESSDATA: Type = 10057;
    pub const CURLOPT_AUTOREFERER: Type = 58;
    pub const CURLOPT_PROXYPORT: Type = 59;
    pub const CURLOPT_POSTFIELDSIZE: Type = 60;
    pub const CURLOPT_HTTPPROXYTUNNEL: Type = 61;
    pub const CURLOPT_INTERFACE: Type = 10062;
    pub const CURLOPT_KRBLEVEL: Type = 10063;
    pub const CURLOPT_SSL_VERIFYPEER: Type = 64;
    pub const CURLOPT_CAINFO: Type = 10065;
    pub const CURLOPT_MAXREDIRS: Type = 68;
    pub const CURLOPT_FILETIME: Type = 69;
    pub const CURLOPT_TELNETOPTIONS: Type = 10070;
    pub const CURLOPT_MAXCONNECTS: Type = 71;
    pub const CURLOPT_OBSOLETE72: Type = 72;
    pub const CURLOPT_FRESH_CONNECT: Type = 74;
    pub const CURLOPT_FORBID_REUSE: Type = 75;
    pub const CURLOPT_RANDOM_FILE: Type = 10076;
    pub const CURLOPT_EGDSOCKET: Type = 10077;
    pub const CURLOPT_CONNECTTIMEOUT: Type = 78;
    pub const CURLOPT_HEADERFUNCTION: Type = 20079;
    pub const CURLOPT_HTTPGET: Type = 80;
    pub const CURLOPT_SSL_VERIFYHOST: Type = 81;
    pub const CURLOPT_COOKIEJAR: Type = 10082;
    pub const CURLOPT_SSL_CIPHER_LIST: Type = 10083;
    pub const CURLOPT_HTTP_VERSION: Type = 84;
    pub const CURLOPT_FTP_USE_EPSV: Type = 85;
    pub const CURLOPT_SSLCERTTYPE: Type = 10086;
    pub const CURLOPT_SSLKEY: Type = 10087;
    pub const CURLOPT_SSLKEYTYPE: Type = 10088;
    pub const CURLOPT_SSLENGINE: Type = 10089;
    pub const CURLOPT_SSLENGINE_DEFAULT: Type = 90;
    pub const CURLOPT_DNS_USE_GLOBAL_CACHE: Type = 91;
    pub const CURLOPT_DNS_CACHE_TIMEOUT: Type = 92;
    pub const CURLOPT_PREQUOTE: Type = 10093;
    pub const CURLOPT_DEBUGFUNCTION: Type = 20094;
    pub const CURLOPT_DEBUGDATA: Type = 10095;
    pub const CURLOPT_COOKIESESSION: Type = 96;
    pub const CURLOPT_CAPATH: Type = 10097;
    pub const CURLOPT_BUFFERSIZE: Type = 98;
    pub const CURLOPT_NOSIGNAL: Type = 99;
    pub const CURLOPT_SHARE: Type = 10100;
    pub const CURLOPT_PROXYTYPE: Type = 101;
    pub const CURLOPT_ACCEPT_ENCODING: Type = 10102;
    pub const CURLOPT_PRIVATE: Type = 10103;
    pub const CURLOPT_HTTP200ALIASES: Type = 10104;
    pub const CURLOPT_UNRESTRICTED_AUTH: Type = 105;
    pub const CURLOPT_FTP_USE_EPRT: Type = 106;
    pub const CURLOPT_HTTPAUTH: Type = 107;
    pub const CURLOPT_SSL_CTX_FUNCTION: Type = 20108;
    pub const CURLOPT_SSL_CTX_DATA: Type = 10109;
    pub const CURLOPT_FTP_CREATE_MISSING_DIRS: Type = 110;
    pub const CURLOPT_PROXYAUTH: Type = 111;
    pub const CURLOPT_FTP_RESPONSE_TIMEOUT: Type = 112;
    pub const CURLOPT_IPRESOLVE: Type = 113;
    pub const CURLOPT_MAXFILESIZE: Type = 114;
    pub const CURLOPT_INFILESIZE_LARGE: Type = 30115;
    pub const CURLOPT_RESUME_FROM_LARGE: Type = 30116;
    pub const CURLOPT_MAXFILESIZE_LARGE: Type = 30117;
    pub const CURLOPT_NETRC_FILE: Type = 10118;
    pub const CURLOPT_USE_SSL: Type = 119;
    pub const CURLOPT_POSTFIELDSIZE_LARGE: Type = 30120;
    pub const CURLOPT_TCP_NODELAY: Type = 121;
    pub const CURLOPT_FTPSSLAUTH: Type = 129;
    pub const CURLOPT_IOCTLFUNCTION: Type = 20130;
    pub const CURLOPT_IOCTLDATA: Type = 10131;
    pub const CURLOPT_FTP_ACCOUNT: Type = 10134;
    pub const CURLOPT_COOKIELIST: Type = 10135;
    pub const CURLOPT_IGNORE_CONTENT_LENGTH: Type = 136;
    pub const CURLOPT_FTP_SKIP_PASV_IP: Type = 137;
    pub const CURLOPT_FTP_FILEMETHOD: Type = 138;
    pub const CURLOPT_LOCALPORT: Type = 139;
    pub const CURLOPT_LOCALPORTRANGE: Type = 140;
    pub const CURLOPT_CONNECT_ONLY: Type = 141;
    pub const CURLOPT_CONV_FROM_NETWORK_FUNCTION: Type = 20142;
    pub const CURLOPT_CONV_TO_NETWORK_FUNCTION: Type = 20143;
    pub const CURLOPT_CONV_FROM_UTF8_FUNCTION: Type = 20144;
    pub const CURLOPT_MAX_SEND_SPEED_LARGE: Type = 30145;
    pub const CURLOPT_MAX_RECV_SPEED_LARGE: Type = 30146;
    pub const CURLOPT_FTP_ALTERNATIVE_TO_USER: Type = 10147;
    pub const CURLOPT_SOCKOPTFUNCTION: Type = 20148;
    pub const CURLOPT_SOCKOPTDATA: Type = 10149;
    pub const CURLOPT_SSL_SESSIONID_CACHE: Type = 150;
    pub const CURLOPT_SSH_AUTH_TYPES: Type = 151;
    pub const CURLOPT_SSH_PUBLIC_KEYFILE: Type = 10152;
    pub const CURLOPT_SSH_PRIVATE_KEYFILE: Type = 10153;
    pub const CURLOPT_FTP_SSL_CCC: Type = 154;
    pub const CURLOPT_TIMEOUT_MS: Type = 155;
    pub const CURLOPT_CONNECTTIMEOUT_MS: Type = 156;
    pub const CURLOPT_HTTP_TRANSFER_DECODING: Type = 157;
    pub const CURLOPT_HTTP_CONTENT_DECODING: Type = 158;
    pub const CURLOPT_NEW_FILE_PERMS: Type = 159;
    pub const CURLOPT_NEW_DIRECTORY_PERMS: Type = 160;
    pub const CURLOPT_POSTREDIR: Type = 161;
    pub const CURLOPT_SSH_HOST_PUBLIC_KEY_MD5: Type = 10162;
    pub const CURLOPT_OPENSOCKETFUNCTION: Type = 20163;
    pub const CURLOPT_OPENSOCKETDATA: Type = 10164;
    pub const CURLOPT_COPYPOSTFIELDS: Type = 10165;
    pub const CURLOPT_PROXY_TRANSFER_MODE: Type = 166;
    pub const CURLOPT_SEEKFUNCTION: Type = 20167;
    pub const CURLOPT_SEEKDATA: Type = 10168;
    pub const CURLOPT_CRLFILE: Type = 10169;
    pub const CURLOPT_ISSUERCERT: Type = 10170;
    pub const CURLOPT_ADDRESS_SCOPE: Type = 171;
    pub const CURLOPT_CERTINFO: Type = 172;
    pub const CURLOPT_USERNAME: Type = 10173;
    pub const CURLOPT_PASSWORD: Type = 10174;
    pub const CURLOPT_PROXYUSERNAME: Type = 10175;
    pub const CURLOPT_PROXYPASSWORD: Type = 10176;
    pub const CURLOPT_NOPROXY: Type = 10177;
    pub const CURLOPT_TFTP_BLKSIZE: Type = 178;
    pub const CURLOPT_SOCKS5_GSSAPI_SERVICE: Type = 10179;
    pub const CURLOPT_SOCKS5_GSSAPI_NEC: Type = 180;
    pub const CURLOPT_PROTOCOLS: Type = 181;
    pub const CURLOPT_REDIR_PROTOCOLS: Type = 182;
    pub const CURLOPT_SSH_KNOWNHOSTS: Type = 10183;
    pub const CURLOPT_SSH_KEYFUNCTION: Type = 20184;
    pub const CURLOPT_SSH_KEYDATA: Type = 10185;
    pub const CURLOPT_MAIL_FROM: Type = 10186;
    pub const CURLOPT_MAIL_RCPT: Type = 10187;
    pub const CURLOPT_FTP_USE_PRET: Type = 188;
    pub const CURLOPT_RTSP_REQUEST: Type = 189;
    pub const CURLOPT_RTSP_SESSION_ID: Type = 10190;
    pub const CURLOPT_RTSP_STREAM_URI: Type = 10191;
    pub const CURLOPT_RTSP_TRANSPORT: Type = 10192;
    pub const CURLOPT_RTSP_CLIENT_CSEQ: Type = 193;
    pub const CURLOPT_RTSP_SERVER_CSEQ: Type = 194;
    pub const CURLOPT_INTERLEAVEDATA: Type = 10195;
    pub const CURLOPT_INTERLEAVEFUNCTION: Type = 20196;
    pub const CURLOPT_WILDCARDMATCH: Type = 197;
    pub const CURLOPT_CHUNK_BGN_FUNCTION: Type = 20198;
    pub const CURLOPT_CHUNK_END_FUNCTION: Type = 20199;
    pub const CURLOPT_FNMATCH_FUNCTION: Type = 20200;
    pub const CURLOPT_CHUNK_DATA: Type = 10201;
    pub const CURLOPT_FNMATCH_DATA: Type = 10202;
    pub const CURLOPT_RESOLVE: Type = 10203;
    pub const CURLOPT_TLSAUTH_USERNAME: Type = 10204;
    pub const CURLOPT_TLSAUTH_PASSWORD: Type = 10205;
    pub const CURLOPT_TLSAUTH_TYPE: Type = 10206;
    pub const CURLOPT_TRANSFER_ENCODING: Type = 207;
    pub const CURLOPT_CLOSESOCKETFUNCTION: Type = 20208;
    pub const CURLOPT_CLOSESOCKETDATA: Type = 10209;
    pub const CURLOPT_GSSAPI_DELEGATION: Type = 210;
    pub const CURLOPT_DNS_SERVERS: Type = 10211;
    pub const CURLOPT_ACCEPTTIMEOUT_MS: Type = 212;
    pub const CURLOPT_TCP_KEEPALIVE: Type = 213;
    pub const CURLOPT_TCP_KEEPIDLE: Type = 214;
    pub const CURLOPT_TCP_KEEPINTVL: Type = 215;
    pub const CURLOPT_SSL_OPTIONS: Type = 216;
    pub const CURLOPT_MAIL_AUTH: Type = 10217;
    pub const CURLOPT_SASL_IR: Type = 218;
    pub const CURLOPT_XFERINFOFUNCTION: Type = 20219;
    pub const CURLOPT_XOAUTH2_BEARER: Type = 10220;
    pub const CURLOPT_DNS_INTERFACE: Type = 10221;
    pub const CURLOPT_DNS_LOCAL_IP4: Type = 10222;
    pub const CURLOPT_DNS_LOCAL_IP6: Type = 10223;
    pub const CURLOPT_LOGIN_OPTIONS: Type = 10224;
    pub const CURLOPT_SSL_ENABLE_NPN: Type = 225;
    pub const CURLOPT_SSL_ENABLE_ALPN: Type = 226;
    pub const CURLOPT_EXPECT_100_TIMEOUT_MS: Type = 227;
    pub const CURLOPT_PROXYHEADER: Type = 10228;
    pub const CURLOPT_HEADEROPT: Type = 229;
    pub const CURLOPT_PINNEDPUBLICKEY: Type = 10230;
    pub const CURLOPT_UNIX_SOCKET_PATH: Type = 10231;
    pub const CURLOPT_SSL_VERIFYSTATUS: Type = 232;
    pub const CURLOPT_SSL_FALSESTART: Type = 233;
    pub const CURLOPT_PATH_AS_IS: Type = 234;
    pub const CURLOPT_PROXY_SERVICE_NAME: Type = 10235;
    pub const CURLOPT_SERVICE_NAME: Type = 10236;
    pub const CURLOPT_PIPEWAIT: Type = 237;
    pub const CURLOPT_DEFAULT_PROTOCOL: Type = 10238;
    pub const CURLOPT_STREAM_WEIGHT: Type = 239;
    pub const CURLOPT_STREAM_DEPENDS: Type = 10240;
    pub const CURLOPT_STREAM_DEPENDS_E: Type = 10241;
    pub const CURLOPT_TFTP_NO_OPTIONS: Type = 242;
    pub const CURLOPT_CONNECT_TO: Type = 10243;
    pub const CURLOPT_TCP_FASTOPEN: Type = 244;
    pub const CURLOPT_KEEP_SENDING_ON_ERROR: Type = 245;
    pub const CURLOPT_PROXY_CAINFO: Type = 10246;
    pub const CURLOPT_PROXY_CAPATH: Type = 10247;
    pub const CURLOPT_PROXY_SSL_VERIFYPEER: Type = 248;
    pub const CURLOPT_PROXY_SSL_VERIFYHOST: Type = 249;
    pub const CURLOPT_PROXY_SSLVERSION: Type = 250;
    pub const CURLOPT_PROXY_TLSAUTH_USERNAME: Type = 10251;
    pub const CURLOPT_PROXY_TLSAUTH_PASSWORD: Type = 10252;
    pub const CURLOPT_PROXY_TLSAUTH_TYPE: Type = 10253;
    pub const CURLOPT_PROXY_SSLCERT: Type = 10254;
    pub const CURLOPT_PROXY_SSLCERTTYPE: Type = 10255;
    pub const CURLOPT_PROXY_SSLKEY: Type = 10256;
    pub const CURLOPT_PROXY_SSLKEYTYPE: Type = 10257;
    pub const CURLOPT_PROXY_KEYPASSWD: Type = 10258;
    pub const CURLOPT_PROXY_SSL_CIPHER_LIST: Type = 10259;
    pub const CURLOPT_PROXY_CRLFILE: Type = 10260;
    pub const CURLOPT_PROXY_SSL_OPTIONS: Type = 261;
    pub const CURLOPT_PRE_PROXY: Type = 10262;
    pub const CURLOPT_PROXY_PINNEDPUBLICKEY: Type = 10263;
    pub const CURLOPT_ABSTRACT_UNIX_SOCKET: Type = 10264;
    pub const CURLOPT_SUPPRESS_CONNECT_HEADERS: Type = 265;
    pub const CURLOPT_REQUEST_TARGET: Type = 10266;
    pub const CURLOPT_SOCKS5_AUTH: Type = 267;
    pub const CURLOPT_SSH_COMPRESSION: Type = 268;
    pub const CURLOPT_MIMEPOST: Type = 10269;
    pub const CURLOPT_TIMEVALUE_LARGE: Type = 30270;
    pub const CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS: Type = 271;
    pub const CURLOPT_RESOLVER_START_FUNCTION: Type = 20272;
    pub const CURLOPT_RESOLVER_START_DATA: Type = 10273;
    pub const CURLOPT_HAPROXYPROTOCOL: Type = 274;
    pub const CURLOPT_DNS_SHUFFLE_ADDRESSES: Type = 275;
    pub const CURLOPT_TLS13_CIPHERS: Type = 10276;
    pub const CURLOPT_PROXY_TLS13_CIPHERS: Type = 10277;
    pub const CURLOPT_DISALLOW_USERNAME_IN_URL: Type = 278;
    pub const CURLOPT_DOH_URL: Type = 10279;
    pub const CURLOPT_UPLOAD_BUFFERSIZE: Type = 280;
    pub const CURLOPT_UPKEEP_INTERVAL_MS: Type = 281;
    pub const CURLOPT_CURLU: Type = 10282;
    pub const CURLOPT_TRAILERFUNCTION: Type = 20283;
    pub const CURLOPT_TRAILERDATA: Type = 10284;
    pub const CURLOPT_HTTP09_ALLOWED: Type = 285;
    pub const CURLOPT_ALTSVC_CTRL: Type = 286;
    pub const CURLOPT_ALTSVC: Type = 10287;
    pub const CURLOPT_LASTENTRY: Type = 10288;
}
pub mod _bindgen_ty_4 {
    pub type Type = u32;
    pub const CURL_HTTP_VERSION_NONE: Type = 0;
    pub const CURL_HTTP_VERSION_1_0: Type = 1;
    pub const CURL_HTTP_VERSION_1_1: Type = 2;
    pub const CURL_HTTP_VERSION_2_0: Type = 3;
    pub const CURL_HTTP_VERSION_2TLS: Type = 4;
    pub const CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE: Type = 5;
    pub const CURL_HTTP_VERSION_LAST: Type = 6;
}
pub mod _bindgen_ty_5 {
    pub type Type = u32;
    pub const CURL_RTSPREQ_NONE: Type = 0;
    pub const CURL_RTSPREQ_OPTIONS: Type = 1;
    pub const CURL_RTSPREQ_DESCRIBE: Type = 2;
    pub const CURL_RTSPREQ_ANNOUNCE: Type = 3;
    pub const CURL_RTSPREQ_SETUP: Type = 4;
    pub const CURL_RTSPREQ_PLAY: Type = 5;
    pub const CURL_RTSPREQ_PAUSE: Type = 6;
    pub const CURL_RTSPREQ_TEARDOWN: Type = 7;
    pub const CURL_RTSPREQ_GET_PARAMETER: Type = 8;
    pub const CURL_RTSPREQ_SET_PARAMETER: Type = 9;
    pub const CURL_RTSPREQ_RECORD: Type = 10;
    pub const CURL_RTSPREQ_RECEIVE: Type = 11;
    pub const CURL_RTSPREQ_LAST: Type = 12;
}
pub mod CURL_NETRC_OPTION {
    pub type Type = u32;
    pub const CURL_NETRC_IGNORED: Type = 0;
    pub const CURL_NETRC_OPTIONAL: Type = 1;
    pub const CURL_NETRC_REQUIRED: Type = 2;
    pub const CURL_NETRC_LAST: Type = 3;
}
pub mod _bindgen_ty_6 {
    pub type Type = u32;
    pub const CURL_SSLVERSION_DEFAULT: Type = 0;
    pub const CURL_SSLVERSION_TLSv1: Type = 1;
    pub const CURL_SSLVERSION_SSLv2: Type = 2;
    pub const CURL_SSLVERSION_SSLv3: Type = 3;
    pub const CURL_SSLVERSION_TLSv1_0: Type = 4;
    pub const CURL_SSLVERSION_TLSv1_1: Type = 5;
    pub const CURL_SSLVERSION_TLSv1_2: Type = 6;
    pub const CURL_SSLVERSION_TLSv1_3: Type = 7;
    pub const CURL_SSLVERSION_LAST: Type = 8;
}
pub mod _bindgen_ty_7 {
    pub type Type = u32;
    pub const CURL_SSLVERSION_MAX_NONE: Type = 0;
    pub const CURL_SSLVERSION_MAX_DEFAULT: Type = 65536;
    pub const CURL_SSLVERSION_MAX_TLSv1_0: Type = 262144;
    pub const CURL_SSLVERSION_MAX_TLSv1_1: Type = 327680;
    pub const CURL_SSLVERSION_MAX_TLSv1_2: Type = 393216;
    pub const CURL_SSLVERSION_MAX_TLSv1_3: Type = 458752;
    pub const CURL_SSLVERSION_MAX_LAST: Type = 524288;
}
pub mod CURL_TLSAUTH {
    pub type Type = u32;
    pub const CURL_TLSAUTH_NONE: Type = 0;
    pub const CURL_TLSAUTH_SRP: Type = 1;
    pub const CURL_TLSAUTH_LAST: Type = 2;
}
pub mod curl_TimeCond {
    pub type Type = u32;
    pub const CURL_TIMECOND_NONE: Type = 0;
    pub const CURL_TIMECOND_IFMODSINCE: Type = 1;
    pub const CURL_TIMECOND_IFUNMODSINCE: Type = 2;
    pub const CURL_TIMECOND_LASTMOD: Type = 3;
    pub const CURL_TIMECOND_LAST: Type = 4;
}
extern "C" {
    pub fn curl_strequal(s1: *const ::libc::c_char, s2: *const ::libc::c_char) -> ::libc::c_int;
}
extern "C" {
    pub fn curl_strnequal(
        s1: *const ::libc::c_char,
        s2: *const ::libc::c_char,
        n: usize,
    ) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_mime_s {
    _unused: [u8; 0],
}
pub type curl_mime = curl_mime_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_mimepart_s {
    _unused: [u8; 0],
}
pub type curl_mimepart = curl_mimepart_s;
extern "C" {
    pub fn curl_mime_init(easy: *mut CURL) -> *mut curl_mime;
}
extern "C" {
    pub fn curl_mime_free(mime: *mut curl_mime);
}
extern "C" {
    pub fn curl_mime_addpart(mime: *mut curl_mime) -> *mut curl_mimepart;
}
extern "C" {
    pub fn curl_mime_name(part: *mut curl_mimepart, name: *const ::libc::c_char) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_mime_filename(
        part: *mut curl_mimepart,
        filename: *const ::libc::c_char,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_mime_type(
        part: *mut curl_mimepart,
        mimetype: *const ::libc::c_char,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_mime_encoder(
        part: *mut curl_mimepart,
        encoding: *const ::libc::c_char,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_mime_data(
        part: *mut curl_mimepart,
        data: *const ::libc::c_char,
        datasize: usize,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_mime_filedata(
        part: *mut curl_mimepart,
        filename: *const ::libc::c_char,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_mime_data_cb(
        part: *mut curl_mimepart,
        datasize: curl_off_t,
        readfunc: curl_read_callback,
        seekfunc: curl_seek_callback,
        freefunc: curl_free_callback,
        arg: *mut ::libc::c_void,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_mime_subparts(part: *mut curl_mimepart, subparts: *mut curl_mime)
        -> CURLcode::Type;
}
extern "C" {
    pub fn curl_mime_headers(
        part: *mut curl_mimepart,
        headers: *mut curl_slist,
        take_ownership: ::libc::c_int,
    ) -> CURLcode::Type;
}
pub mod CURLformoption {
    pub type Type = u32;
    pub const CURLFORM_NOTHING: Type = 0;
    pub const CURLFORM_COPYNAME: Type = 1;
    pub const CURLFORM_PTRNAME: Type = 2;
    pub const CURLFORM_NAMELENGTH: Type = 3;
    pub const CURLFORM_COPYCONTENTS: Type = 4;
    pub const CURLFORM_PTRCONTENTS: Type = 5;
    pub const CURLFORM_CONTENTSLENGTH: Type = 6;
    pub const CURLFORM_FILECONTENT: Type = 7;
    pub const CURLFORM_ARRAY: Type = 8;
    pub const CURLFORM_OBSOLETE: Type = 9;
    pub const CURLFORM_FILE: Type = 10;
    pub const CURLFORM_BUFFER: Type = 11;
    pub const CURLFORM_BUFFERPTR: Type = 12;
    pub const CURLFORM_BUFFERLENGTH: Type = 13;
    pub const CURLFORM_CONTENTTYPE: Type = 14;
    pub const CURLFORM_CONTENTHEADER: Type = 15;
    pub const CURLFORM_FILENAME: Type = 16;
    pub const CURLFORM_END: Type = 17;
    pub const CURLFORM_OBSOLETE2: Type = 18;
    pub const CURLFORM_STREAM: Type = 19;
    pub const CURLFORM_CONTENTLEN: Type = 20;
    #[doc = " the first one is unused"]
    pub const CURLFORM_LASTENTRY: Type = 21;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_forms {
    pub option: CURLformoption::Type,
    pub value: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_curl_forms() {
    assert_eq!(
        ::std::mem::size_of::<curl_forms>(),
        16usize,
        concat!("Size of: ", stringify!(curl_forms))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_forms>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_forms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_forms>())).option as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_forms),
            "::",
            stringify!(option)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_forms>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_forms),
            "::",
            stringify!(value)
        )
    );
}
pub mod CURLFORMcode {
    pub type Type = u32;
    pub const CURL_FORMADD_OK: Type = 0;
    pub const CURL_FORMADD_MEMORY: Type = 1;
    pub const CURL_FORMADD_OPTION_TWICE: Type = 2;
    pub const CURL_FORMADD_NULL: Type = 3;
    pub const CURL_FORMADD_UNKNOWN_OPTION: Type = 4;
    pub const CURL_FORMADD_INCOMPLETE: Type = 5;
    pub const CURL_FORMADD_ILLEGAL_ARRAY: Type = 6;
    pub const CURL_FORMADD_DISABLED: Type = 7;
    pub const CURL_FORMADD_LAST: Type = 8;
}
extern "C" {
    pub fn curl_formadd(
        httppost: *mut *mut curl_httppost,
        last_post: *mut *mut curl_httppost,
        ...
    ) -> CURLFORMcode::Type;
}
pub type curl_formget_callback = ::std::option::Option<
    unsafe extern "C" fn(arg: *mut ::libc::c_void, buf: *const ::libc::c_char, len: usize) -> usize,
>;
extern "C" {
    pub fn curl_formget(
        form: *mut curl_httppost,
        arg: *mut ::libc::c_void,
        append: curl_formget_callback,
    ) -> ::libc::c_int;
}
extern "C" {
    pub fn curl_formfree(form: *mut curl_httppost);
}
extern "C" {
    pub fn curl_getenv(variable: *const ::libc::c_char) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn curl_version() -> *mut ::libc::c_char;
}
extern "C" {
    pub fn curl_easy_escape(
        handle: *mut CURL,
        string: *const ::libc::c_char,
        length: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn curl_escape(string: *const ::libc::c_char, length: ::libc::c_int)
        -> *mut ::libc::c_char;
}
extern "C" {
    pub fn curl_easy_unescape(
        handle: *mut CURL,
        string: *const ::libc::c_char,
        length: ::libc::c_int,
        outlength: *mut ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn curl_unescape(
        string: *const ::libc::c_char,
        length: ::libc::c_int,
    ) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn curl_free(p: *mut ::libc::c_void);
}
extern "C" {
    pub fn curl_global_init(flags: ::libc::c_long) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_global_init_mem(
        flags: ::libc::c_long,
        m: curl_malloc_callback,
        f: curl_free_callback,
        r: curl_realloc_callback,
        s: curl_strdup_callback,
        c: curl_calloc_callback,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_global_cleanup();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_slist {
    pub data: *mut ::libc::c_char,
    pub next: *mut curl_slist,
}
#[test]
fn bindgen_test_layout_curl_slist() {
    assert_eq!(
        ::std::mem::size_of::<curl_slist>(),
        16usize,
        concat!("Size of: ", stringify!(curl_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_slist>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_slist),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_slist>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_slist),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_ssl_backend {
    pub id: curl_sslbackend::Type,
    pub name: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_curl_ssl_backend() {
    assert_eq!(
        ::std::mem::size_of::<curl_ssl_backend>(),
        16usize,
        concat!("Size of: ", stringify!(curl_ssl_backend))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_ssl_backend>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_ssl_backend))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_ssl_backend>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_ssl_backend),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_ssl_backend>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_ssl_backend),
            "::",
            stringify!(name)
        )
    );
}
pub mod CURLsslset {
    pub type Type = u32;
    pub const CURLSSLSET_OK: Type = 0;
    pub const CURLSSLSET_UNKNOWN_BACKEND: Type = 1;
    pub const CURLSSLSET_TOO_LATE: Type = 2;
    pub const CURLSSLSET_NO_BACKENDS: Type = 3;
}
extern "C" {
    pub fn curl_global_sslset(
        id: curl_sslbackend::Type,
        name: *const ::libc::c_char,
        avail: *mut *mut *const curl_ssl_backend,
    ) -> CURLsslset::Type;
}
extern "C" {
    pub fn curl_slist_append(arg1: *mut curl_slist, arg2: *const ::libc::c_char)
        -> *mut curl_slist;
}
extern "C" {
    pub fn curl_slist_free_all(arg1: *mut curl_slist);
}
extern "C" {
    pub fn curl_getdate(p: *const ::libc::c_char, unused: *const time_t) -> time_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_certinfo {
    pub num_of_certs: ::libc::c_int,
    pub certinfo: *mut *mut curl_slist,
}
#[test]
fn bindgen_test_layout_curl_certinfo() {
    assert_eq!(
        ::std::mem::size_of::<curl_certinfo>(),
        16usize,
        concat!("Size of: ", stringify!(curl_certinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_certinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_certinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_certinfo>())).num_of_certs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_certinfo),
            "::",
            stringify!(num_of_certs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_certinfo>())).certinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_certinfo),
            "::",
            stringify!(certinfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_tlssessioninfo {
    pub backend: curl_sslbackend::Type,
    pub internals: *mut ::libc::c_void,
}
#[test]
fn bindgen_test_layout_curl_tlssessioninfo() {
    assert_eq!(
        ::std::mem::size_of::<curl_tlssessioninfo>(),
        16usize,
        concat!("Size of: ", stringify!(curl_tlssessioninfo))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_tlssessioninfo>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_tlssessioninfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_tlssessioninfo>())).backend as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_tlssessioninfo),
            "::",
            stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_tlssessioninfo>())).internals as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_tlssessioninfo),
            "::",
            stringify!(internals)
        )
    );
}
pub mod CURLINFO {
    pub type Type = u32;
    pub const CURLINFO_NONE: Type = 0;
    pub const CURLINFO_EFFECTIVE_URL: Type = 1048577;
    pub const CURLINFO_RESPONSE_CODE: Type = 2097154;
    pub const CURLINFO_TOTAL_TIME: Type = 3145731;
    pub const CURLINFO_NAMELOOKUP_TIME: Type = 3145732;
    pub const CURLINFO_CONNECT_TIME: Type = 3145733;
    pub const CURLINFO_PRETRANSFER_TIME: Type = 3145734;
    pub const CURLINFO_SIZE_UPLOAD: Type = 3145735;
    pub const CURLINFO_SIZE_UPLOAD_T: Type = 6291463;
    pub const CURLINFO_SIZE_DOWNLOAD: Type = 3145736;
    pub const CURLINFO_SIZE_DOWNLOAD_T: Type = 6291464;
    pub const CURLINFO_SPEED_DOWNLOAD: Type = 3145737;
    pub const CURLINFO_SPEED_DOWNLOAD_T: Type = 6291465;
    pub const CURLINFO_SPEED_UPLOAD: Type = 3145738;
    pub const CURLINFO_SPEED_UPLOAD_T: Type = 6291466;
    pub const CURLINFO_HEADER_SIZE: Type = 2097163;
    pub const CURLINFO_REQUEST_SIZE: Type = 2097164;
    pub const CURLINFO_SSL_VERIFYRESULT: Type = 2097165;
    pub const CURLINFO_FILETIME: Type = 2097166;
    pub const CURLINFO_FILETIME_T: Type = 6291470;
    pub const CURLINFO_CONTENT_LENGTH_DOWNLOAD: Type = 3145743;
    pub const CURLINFO_CONTENT_LENGTH_DOWNLOAD_T: Type = 6291471;
    pub const CURLINFO_CONTENT_LENGTH_UPLOAD: Type = 3145744;
    pub const CURLINFO_CONTENT_LENGTH_UPLOAD_T: Type = 6291472;
    pub const CURLINFO_STARTTRANSFER_TIME: Type = 3145745;
    pub const CURLINFO_CONTENT_TYPE: Type = 1048594;
    pub const CURLINFO_REDIRECT_TIME: Type = 3145747;
    pub const CURLINFO_REDIRECT_COUNT: Type = 2097172;
    pub const CURLINFO_PRIVATE: Type = 1048597;
    pub const CURLINFO_HTTP_CONNECTCODE: Type = 2097174;
    pub const CURLINFO_HTTPAUTH_AVAIL: Type = 2097175;
    pub const CURLINFO_PROXYAUTH_AVAIL: Type = 2097176;
    pub const CURLINFO_OS_ERRNO: Type = 2097177;
    pub const CURLINFO_NUM_CONNECTS: Type = 2097178;
    pub const CURLINFO_SSL_ENGINES: Type = 4194331;
    pub const CURLINFO_COOKIELIST: Type = 4194332;
    pub const CURLINFO_LASTSOCKET: Type = 2097181;
    pub const CURLINFO_FTP_ENTRY_PATH: Type = 1048606;
    pub const CURLINFO_REDIRECT_URL: Type = 1048607;
    pub const CURLINFO_PRIMARY_IP: Type = 1048608;
    pub const CURLINFO_APPCONNECT_TIME: Type = 3145761;
    pub const CURLINFO_CERTINFO: Type = 4194338;
    pub const CURLINFO_CONDITION_UNMET: Type = 2097187;
    pub const CURLINFO_RTSP_SESSION_ID: Type = 1048612;
    pub const CURLINFO_RTSP_CLIENT_CSEQ: Type = 2097189;
    pub const CURLINFO_RTSP_SERVER_CSEQ: Type = 2097190;
    pub const CURLINFO_RTSP_CSEQ_RECV: Type = 2097191;
    pub const CURLINFO_PRIMARY_PORT: Type = 2097192;
    pub const CURLINFO_LOCAL_IP: Type = 1048617;
    pub const CURLINFO_LOCAL_PORT: Type = 2097194;
    pub const CURLINFO_TLS_SESSION: Type = 4194347;
    pub const CURLINFO_ACTIVESOCKET: Type = 5242924;
    pub const CURLINFO_TLS_SSL_PTR: Type = 4194349;
    pub const CURLINFO_HTTP_VERSION: Type = 2097198;
    pub const CURLINFO_PROXY_SSL_VERIFYRESULT: Type = 2097199;
    pub const CURLINFO_PROTOCOL: Type = 2097200;
    pub const CURLINFO_SCHEME: Type = 1048625;
    pub const CURLINFO_TOTAL_TIME_T: Type = 6291506;
    pub const CURLINFO_NAMELOOKUP_TIME_T: Type = 6291507;
    pub const CURLINFO_CONNECT_TIME_T: Type = 6291508;
    pub const CURLINFO_PRETRANSFER_TIME_T: Type = 6291509;
    pub const CURLINFO_STARTTRANSFER_TIME_T: Type = 6291510;
    pub const CURLINFO_REDIRECT_TIME_T: Type = 6291511;
    pub const CURLINFO_APPCONNECT_TIME_T: Type = 6291512;
    pub const CURLINFO_LASTONE: Type = 56;
}
pub mod curl_closepolicy {
    pub type Type = u32;
    pub const CURLCLOSEPOLICY_NONE: Type = 0;
    pub const CURLCLOSEPOLICY_OLDEST: Type = 1;
    pub const CURLCLOSEPOLICY_LEAST_RECENTLY_USED: Type = 2;
    pub const CURLCLOSEPOLICY_LEAST_TRAFFIC: Type = 3;
    pub const CURLCLOSEPOLICY_SLOWEST: Type = 4;
    pub const CURLCLOSEPOLICY_CALLBACK: Type = 5;
    pub const CURLCLOSEPOLICY_LAST: Type = 6;
}
pub mod curl_lock_data {
    #[doc = " Setup defines, protos etc for the sharing stuff."]
    pub type Type = u32;
    pub const CURL_LOCK_DATA_NONE: Type = 0;
    pub const CURL_LOCK_DATA_SHARE: Type = 1;
    pub const CURL_LOCK_DATA_COOKIE: Type = 2;
    pub const CURL_LOCK_DATA_DNS: Type = 3;
    pub const CURL_LOCK_DATA_SSL_SESSION: Type = 4;
    pub const CURL_LOCK_DATA_CONNECT: Type = 5;
    pub const CURL_LOCK_DATA_PSL: Type = 6;
    pub const CURL_LOCK_DATA_LAST: Type = 7;
}
pub mod curl_lock_access {
    pub type Type = u32;
    pub const CURL_LOCK_ACCESS_NONE: Type = 0;
    pub const CURL_LOCK_ACCESS_SHARED: Type = 1;
    pub const CURL_LOCK_ACCESS_SINGLE: Type = 2;
    pub const CURL_LOCK_ACCESS_LAST: Type = 3;
}
pub type curl_lock_function = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut CURL,
        data: curl_lock_data::Type,
        locktype: curl_lock_access::Type,
        userptr: *mut ::libc::c_void,
    ),
>;
pub type curl_unlock_function = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut CURL,
        data: curl_lock_data::Type,
        userptr: *mut ::libc::c_void,
    ),
>;
pub mod CURLSHcode {
    pub type Type = u32;
    pub const CURLSHE_OK: Type = 0;
    pub const CURLSHE_BAD_OPTION: Type = 1;
    pub const CURLSHE_IN_USE: Type = 2;
    pub const CURLSHE_INVALID: Type = 3;
    pub const CURLSHE_NOMEM: Type = 4;
    pub const CURLSHE_NOT_BUILT_IN: Type = 5;
    pub const CURLSHE_LAST: Type = 6;
}
pub mod CURLSHoption {
    pub type Type = u32;
    pub const CURLSHOPT_NONE: Type = 0;
    pub const CURLSHOPT_SHARE: Type = 1;
    pub const CURLSHOPT_UNSHARE: Type = 2;
    pub const CURLSHOPT_LOCKFUNC: Type = 3;
    pub const CURLSHOPT_UNLOCKFUNC: Type = 4;
    pub const CURLSHOPT_USERDATA: Type = 5;
    pub const CURLSHOPT_LAST: Type = 6;
}
extern "C" {
    pub fn curl_share_init() -> *mut CURLSH;
}
extern "C" {
    pub fn curl_share_setopt(
        arg1: *mut CURLSH,
        option: CURLSHoption::Type,
        ...
    ) -> CURLSHcode::Type;
}
extern "C" {
    pub fn curl_share_cleanup(arg1: *mut CURLSH) -> CURLSHcode::Type;
}
pub mod CURLversion {
    #[doc = " Structures for querying information about the curl library at runtime."]
    pub type Type = u32;
    pub const CURLVERSION_FIRST: Type = 0;
    pub const CURLVERSION_SECOND: Type = 1;
    pub const CURLVERSION_THIRD: Type = 2;
    pub const CURLVERSION_FOURTH: Type = 3;
    pub const CURLVERSION_FIFTH: Type = 4;
    pub const CURLVERSION_LAST: Type = 5;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_version_info_data {
    pub age: CURLversion::Type,
    pub version: *const ::libc::c_char,
    pub version_num: ::libc::c_uint,
    pub host: *const ::libc::c_char,
    pub features: ::libc::c_int,
    pub ssl_version: *const ::libc::c_char,
    pub ssl_version_num: ::libc::c_long,
    pub libz_version: *const ::libc::c_char,
    pub protocols: *const *const ::libc::c_char,
    pub ares: *const ::libc::c_char,
    pub ares_num: ::libc::c_int,
    pub libidn: *const ::libc::c_char,
    pub iconv_ver_num: ::libc::c_int,
    pub libssh_version: *const ::libc::c_char,
    pub brotli_ver_num: ::libc::c_uint,
    pub brotli_version: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_curl_version_info_data() {
    assert_eq!(
        ::std::mem::size_of::<curl_version_info_data>(),
        128usize,
        concat!("Size of: ", stringify!(curl_version_info_data))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_version_info_data>(),
        8usize,
        concat!("Alignment of ", stringify!(curl_version_info_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_version_info_data>())).age as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(age)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_version_info_data>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).version_num as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(version_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_version_info_data>())).host as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_version_info_data>())).features as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).ssl_version as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(ssl_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).ssl_version_num as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(ssl_version_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).libz_version as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(libz_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).protocols as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(protocols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_version_info_data>())).ares as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(ares)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_version_info_data>())).ares_num as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(ares_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_version_info_data>())).libidn as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(libidn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).iconv_ver_num as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(iconv_ver_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).libssh_version as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(libssh_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).brotli_ver_num as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(brotli_ver_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<curl_version_info_data>())).brotli_version as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_version_info_data),
            "::",
            stringify!(brotli_version)
        )
    );
}
extern "C" {
    pub fn curl_version_info(arg1: CURLversion::Type) -> *mut curl_version_info_data;
}
extern "C" {
    pub fn curl_easy_strerror(arg1: CURLcode::Type) -> *const ::libc::c_char;
}
extern "C" {
    pub fn curl_share_strerror(arg1: CURLSHcode::Type) -> *const ::libc::c_char;
}
extern "C" {
    pub fn curl_easy_pause(handle: *mut CURL, bitmask: ::libc::c_int) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_easy_init() -> *mut CURL;
}
extern "C" {
    pub fn curl_easy_setopt(curl: *mut CURL, option: CURLoption::Type, ...) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_easy_perform(curl: *mut CURL) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_easy_cleanup(curl: *mut CURL);
}
extern "C" {
    pub fn curl_easy_getinfo(curl: *mut CURL, info: CURLINFO::Type, ...) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_easy_duphandle(curl: *mut CURL) -> *mut CURL;
}
extern "C" {
    pub fn curl_easy_reset(curl: *mut CURL);
}
extern "C" {
    pub fn curl_easy_recv(
        curl: *mut CURL,
        buffer: *mut ::libc::c_void,
        buflen: usize,
        n: *mut usize,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_easy_send(
        curl: *mut CURL,
        buffer: *const ::libc::c_void,
        buflen: usize,
        n: *mut usize,
    ) -> CURLcode::Type;
}
extern "C" {
    pub fn curl_easy_upkeep(curl: *mut CURL) -> CURLcode::Type;
}
pub type CURLM = ::libc::c_void;
pub mod CURLMcode {
    pub type Type = i32;
    pub const CURLM_CALL_MULTI_PERFORM: Type = -1;
    pub const CURLM_OK: Type = 0;
    pub const CURLM_BAD_HANDLE: Type = 1;
    pub const CURLM_BAD_EASY_HANDLE: Type = 2;
    pub const CURLM_OUT_OF_MEMORY: Type = 3;
    pub const CURLM_INTERNAL_ERROR: Type = 4;
    pub const CURLM_BAD_SOCKET: Type = 5;
    pub const CURLM_UNKNOWN_OPTION: Type = 6;
    pub const CURLM_ADDED_ALREADY: Type = 7;
    pub const CURLM_RECURSIVE_API_CALL: Type = 8;
    pub const CURLM_LAST: Type = 9;
}
pub mod CURLMSG {
    pub type Type = u32;
    pub const CURLMSG_NONE: Type = 0;
    pub const CURLMSG_DONE: Type = 1;
    pub const CURLMSG_LAST: Type = 2;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CURLMsg {
    pub msg: CURLMSG::Type,
    pub easy_handle: *mut CURL,
    pub data: CURLMsg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CURLMsg__bindgen_ty_1 {
    pub whatever: *mut ::libc::c_void,
    pub result: CURLcode::Type,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_CURLMsg__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<CURLMsg__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(CURLMsg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CURLMsg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CURLMsg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CURLMsg__bindgen_ty_1>())).whatever as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CURLMsg__bindgen_ty_1),
            "::",
            stringify!(whatever)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CURLMsg__bindgen_ty_1>())).result as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CURLMsg__bindgen_ty_1),
            "::",
            stringify!(result)
        )
    );
}
#[test]
fn bindgen_test_layout_CURLMsg() {
    assert_eq!(
        ::std::mem::size_of::<CURLMsg>(),
        24usize,
        concat!("Size of: ", stringify!(CURLMsg))
    );
    assert_eq!(
        ::std::mem::align_of::<CURLMsg>(),
        8usize,
        concat!("Alignment of ", stringify!(CURLMsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CURLMsg>())).msg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CURLMsg),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CURLMsg>())).easy_handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CURLMsg),
            "::",
            stringify!(easy_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CURLMsg>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CURLMsg),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_waitfd {
    pub fd: curl_socket_t,
    pub events: ::libc::c_short,
    pub revents: ::libc::c_short,
}
#[test]
fn bindgen_test_layout_curl_waitfd() {
    assert_eq!(
        ::std::mem::size_of::<curl_waitfd>(),
        8usize,
        concat!("Size of: ", stringify!(curl_waitfd))
    );
    assert_eq!(
        ::std::mem::align_of::<curl_waitfd>(),
        4usize,
        concat!("Alignment of ", stringify!(curl_waitfd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_waitfd>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_waitfd),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_waitfd>())).events as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_waitfd),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curl_waitfd>())).revents as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(curl_waitfd),
            "::",
            stringify!(revents)
        )
    );
}
extern "C" {
    pub fn curl_multi_init() -> *mut CURLM;
}
extern "C" {
    pub fn curl_multi_add_handle(
        multi_handle: *mut CURLM,
        curl_handle: *mut CURL,
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_remove_handle(
        multi_handle: *mut CURLM,
        curl_handle: *mut CURL,
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_fdset(
        multi_handle: *mut CURLM,
        read_fd_set: *mut fd_set,
        write_fd_set: *mut fd_set,
        exc_fd_set: *mut fd_set,
        max_fd: *mut ::libc::c_int,
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_wait(
        multi_handle: *mut CURLM,
        extra_fds: *mut curl_waitfd,
        extra_nfds: ::libc::c_uint,
        timeout_ms: ::libc::c_int,
        ret: *mut ::libc::c_int,
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_perform(
        multi_handle: *mut CURLM,
        running_handles: *mut ::libc::c_int,
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_cleanup(multi_handle: *mut CURLM) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_info_read(
        multi_handle: *mut CURLM,
        msgs_in_queue: *mut ::libc::c_int,
    ) -> *mut CURLMsg;
}
extern "C" {
    pub fn curl_multi_strerror(arg1: CURLMcode::Type) -> *const ::libc::c_char;
}
pub type curl_socket_callback = ::std::option::Option<
    unsafe extern "C" fn(
        easy: *mut CURL,
        s: curl_socket_t,
        what: ::libc::c_int,
        userp: *mut ::libc::c_void,
        socketp: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type curl_multi_timer_callback = ::std::option::Option<
    unsafe extern "C" fn(
        multi: *mut CURLM,
        timeout_ms: ::libc::c_long,
        userp: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
extern "C" {
    pub fn curl_multi_socket(
        multi_handle: *mut CURLM,
        s: curl_socket_t,
        running_handles: *mut ::libc::c_int,
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_socket_action(
        multi_handle: *mut CURLM,
        s: curl_socket_t,
        ev_bitmask: ::libc::c_int,
        running_handles: *mut ::libc::c_int,
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_socket_all(
        multi_handle: *mut CURLM,
        running_handles: *mut ::libc::c_int,
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_timeout(
        multi_handle: *mut CURLM,
        milliseconds: *mut ::libc::c_long,
    ) -> CURLMcode::Type;
}
pub mod CURLMoption {
    pub type Type = u32;
    pub const CURLMOPT_SOCKETFUNCTION: Type = 20001;
    pub const CURLMOPT_SOCKETDATA: Type = 10002;
    pub const CURLMOPT_PIPELINING: Type = 3;
    pub const CURLMOPT_TIMERFUNCTION: Type = 20004;
    pub const CURLMOPT_TIMERDATA: Type = 10005;
    pub const CURLMOPT_MAXCONNECTS: Type = 6;
    pub const CURLMOPT_MAX_HOST_CONNECTIONS: Type = 7;
    pub const CURLMOPT_MAX_PIPELINE_LENGTH: Type = 8;
    pub const CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE: Type = 30009;
    pub const CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE: Type = 30010;
    pub const CURLMOPT_PIPELINING_SITE_BL: Type = 10011;
    pub const CURLMOPT_PIPELINING_SERVER_BL: Type = 10012;
    pub const CURLMOPT_MAX_TOTAL_CONNECTIONS: Type = 13;
    pub const CURLMOPT_PUSHFUNCTION: Type = 20014;
    pub const CURLMOPT_PUSHDATA: Type = 10015;
    pub const CURLMOPT_LASTENTRY: Type = 10016;
}
extern "C" {
    pub fn curl_multi_setopt(
        multi_handle: *mut CURLM,
        option: CURLMoption::Type,
        ...
    ) -> CURLMcode::Type;
}
extern "C" {
    pub fn curl_multi_assign(
        multi_handle: *mut CURLM,
        sockfd: curl_socket_t,
        sockp: *mut ::libc::c_void,
    ) -> CURLMcode::Type;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curl_pushheaders {
    _unused: [u8; 0],
}
extern "C" {
    pub fn curl_pushheader_bynum(h: *mut curl_pushheaders, num: usize) -> *mut ::libc::c_char;
}
extern "C" {
    pub fn curl_pushheader_byname(
        h: *mut curl_pushheaders,
        name: *const ::libc::c_char,
    ) -> *mut ::libc::c_char;
}
pub type curl_push_callback = ::std::option::Option<
    unsafe extern "C" fn(
        parent: *mut CURL,
        easy: *mut CURL,
        num_headers: usize,
        headers: *mut curl_pushheaders,
        userp: *mut ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub mod CURLUcode {
    pub type Type = u32;
    pub const CURLUE_OK: Type = 0;
    pub const CURLUE_BAD_HANDLE: Type = 1;
    pub const CURLUE_BAD_PARTPOINTER: Type = 2;
    pub const CURLUE_MALFORMED_INPUT: Type = 3;
    pub const CURLUE_BAD_PORT_NUMBER: Type = 4;
    pub const CURLUE_UNSUPPORTED_SCHEME: Type = 5;
    pub const CURLUE_URLDECODE: Type = 6;
    pub const CURLUE_OUT_OF_MEMORY: Type = 7;
    pub const CURLUE_USER_NOT_ALLOWED: Type = 8;
    pub const CURLUE_UNKNOWN_PART: Type = 9;
    pub const CURLUE_NO_SCHEME: Type = 10;
    pub const CURLUE_NO_USER: Type = 11;
    pub const CURLUE_NO_PASSWORD: Type = 12;
    pub const CURLUE_NO_OPTIONS: Type = 13;
    pub const CURLUE_NO_HOST: Type = 14;
    pub const CURLUE_NO_PORT: Type = 15;
    pub const CURLUE_NO_QUERY: Type = 16;
    pub const CURLUE_NO_FRAGMENT: Type = 17;
}
pub mod CURLUPart {
    pub type Type = u32;
    pub const CURLUPART_URL: Type = 0;
    pub const CURLUPART_SCHEME: Type = 1;
    pub const CURLUPART_USER: Type = 2;
    pub const CURLUPART_PASSWORD: Type = 3;
    pub const CURLUPART_OPTIONS: Type = 4;
    pub const CURLUPART_HOST: Type = 5;
    pub const CURLUPART_PORT: Type = 6;
    pub const CURLUPART_PATH: Type = 7;
    pub const CURLUPART_QUERY: Type = 8;
    pub const CURLUPART_FRAGMENT: Type = 9;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Curl_URL {
    _unused: [u8; 0],
}
pub type CURLU = Curl_URL;
extern "C" {
    pub fn curl_url() -> *mut CURLU;
}
extern "C" {
    pub fn curl_url_cleanup(handle: *mut CURLU);
}
extern "C" {
    pub fn curl_url_dup(in_: *mut CURLU) -> *mut CURLU;
}
extern "C" {
    pub fn curl_url_get(
        handle: *mut CURLU,
        what: CURLUPart::Type,
        part: *mut *mut ::libc::c_char,
        flags: ::libc::c_uint,
    ) -> CURLUcode::Type;
}
extern "C" {
    pub fn curl_url_set(
        handle: *mut CURLU,
        what: CURLUPart::Type,
        part: *const ::libc::c_char,
        flags: ::libc::c_uint,
    ) -> CURLUcode::Type;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
